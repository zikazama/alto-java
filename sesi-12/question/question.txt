Lingkup Proyek

Aplikasi: Sistem Manajemen Dompet Digital.

Tech Stack:
Spring Boot (Maven, Java 21).
Redis sebagai caching layer.
RabbitMQ atau Kafka untuk message broker.
MySQL/PostgreSQL sebagai database utama.

Registrasi, Otentikasi, dan Pengelolaan Profil Pengguna
Sistem registrasi pengguna dengan validasi input.
Otentikasi menggunakan JWT (JSON Web Token) untuk keamanan API.

Manajemen Transaksi
Fitur untuk top-up, transfer antar pengguna, dan pembayaran.
Riwayat transaksi berdasarkan rentang tanggal.

Notifikasi Transaksi
Notifikasi email/SMS untuk transaksi sukses/gagal menggunakan RabbitMQ sebagai message broker.

Analitik Dasar
Analisis pengeluaran bulanan pengguna menggunakan Kafka sebagai data streaming platform.

Rate Limiting
Implementasi rate limiting menggunakan Spring Boot untuk mencegah DDoS atau overuse API.

Logging dan Monitoring
Setup logging (gunakan Logback atau SLF4J) untuk pencatatan aktivitas sistem.

Input Validation
Validasi input menggunakan Spring Validation untuk mencegah serangan berbasis input, seperti SQL Injection atau XSS.

CREATE TABLE transactions (
  transaction_id UUID PRIMARY KEY,
  user_id UUID NOT NULL,
  type ENUM('TOPUP', 'TRANSFER', 'PAYMENT'),
  amount DECIMAL(10, 2),
  status ENUM('SUCCESS', 'FAILED'),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Konfigurasi Redis untuk Otentikasi Token
Simpan token otentikasi (access/refresh token) di Redis dengan masa berlaku tertentu.
Contoh implementasi:
redisTemplate.opsForValue().set("TOKEN_KEY", jwtToken, 3600, TimeUnit.SECONDS);

Caching Data Transaksi Sementara
Gunakan Redis untuk menyimpan histori transaksi yang sering diakses.

Konfigurasi RabbitMQ untuk Notifikasi
Kirim notifikasi transaksi menggunakan queue RabbitMQ.
Contoh format message:
{
  "transactionId": "UUID",
  "userId": "UUID",
  "email": "string@example.com",
  "status": "SUCCESS",
  "amount": 100000
}

Analisis Transaksi dengan Kafka
Streaming data transaksi ke Kafka untuk analitik.
Set up topic Kafka transactions-analytics.

Gunakan prinsip SOLID dan repository pattern untuk memisahkan logika bisnis dari kode database.
Sertakan komentar untuk setiap service method yang dibuat, contohnya:
/**
 * This method handles user registration and saves the user to the database.
 * @param userRequest contains user data such as username, password, and email.
 * @return UserResponse containing userId and success message.
 */
public UserResponse registerUser(UserRequest userRequest) { ... }

List endpoint terdapat di file docs.yaml

Dokumen Desain: Diagram arsitektur, ERD, dan deskripsi teknis layanan.
Kode Sumber: Repositori GitHub dengan struktur modular, dokumentasi, dan clean code.
Dokumentasi API: Endpoint REST API/gRPC beserta contoh penggunaan.
Demo Aplikasi: Aplikasi yang dapat diakses melalui Postman/UI sederhana untuk memvalidasi fungsionalitas.
