

=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/FintechTransactionServiceApplication.java ===
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FintechTransactionServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(FintechTransactionServiceApplication.class, args);
	}

}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/FintechTransactionServiceApplication.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/adapter/repository/TransactionRepository.java ===
package com.example.demo.adapter.repository;

import com.example.demo.domain.Transaction;
import org.springframework.data.jpa.repository.JpaRepository;

public interface TransactionRepository extends JpaRepository<Transaction, Long> {
    // Tambahkan method custom jika diperlukan
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/adapter/repository/TransactionRepository.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/adapter/repository/UserRepository.java ===
package com.example.demo.adapter.repository;

import com.example.demo.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/adapter/repository/UserRepository.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/controller/UserController.java ===
import com.example.demo.adapter.repository.TransactionRepository;
import com.example.demo.adapter.repository.UserRepository;
import com.example.demo.domain.Transaction;
import com.example.demo.domain.User;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;

@RestController
@RequestMapping("/users")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<User> createUser(@RequestParam String fullName,
                                           @RequestParam String email,
                                           @RequestParam(required = false) BigDecimal initialBalance) {
        User user = userService.createUser(fullName, email, initialBalance);
        return ResponseEntity.ok(user);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/controller/UserController.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/domain/Transaction.java ===
package com.example.demo.domain;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "transactions")
public class Transaction {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @Column(nullable = false)
    private String type; // "DEPOSIT", "WITHDRAW", "TRANSFER"

    @Column(nullable = false)
    private BigDecimal amount;

    @Column(nullable = false)
    private LocalDateTime timestamp;

    public Transaction() {}

    public Transaction(Long id, User user, String type, BigDecimal amount, LocalDateTime timestamp) {
        this.id = id;
        this.user = user;
        this.type = type;
        this.amount = amount;
        this.timestamp = timestamp;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public LocalDateTime getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/domain/Transaction.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/domain/User.java ===
package com.example.demo.domain;

import jakarta.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)
    private String fullName;

    @Column(nullable = false)
    private BigDecimal balance;

    public User() {
        this.balance = BigDecimal.ZERO;
    }

    public User(Long id, String email, String fullName, BigDecimal balance) {
        this.id = id;
        this.email = email;
        this.fullName = fullName;
        this.balance = balance;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public BigDecimal getBalance() {
        return balance;
    }

    public void setBalance(BigDecimal balance) {
        this.balance = balance;
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/domain/User.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/usecase/TransactionService.java ===
import com.example.demo.adapter.repository.TransactionRepository;
import com.example.demo.adapter.repository.UserRepository;
import com.example.demo.domain.Transaction;
import com.example.demo.domain.User;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class TransactionService {
    private final TransactionRepository transactionRepository;
    private final UserRepository userRepository;

    public TransactionService(TransactionRepository transactionRepository, UserRepository userRepository) {
        this.transactionRepository = transactionRepository;
        this.userRepository = userRepository;
    }

    @Transactional
    public Transaction deposit(Long userId, BigDecimal amount) {
        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Deposit amount must be positive.");
        }
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User not found."));
        user.setBalance(user.getBalance().add(amount));
        Transaction transaction = new Transaction(null, user, "DEPOSIT", amount, LocalDateTime.now());

        return transactionRepository.save(transaction);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/usecase/TransactionService.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/usecase/UserService.java ===
import com.example.demo.adapter.repository.TransactionRepository;
import com.example.demo.adapter.repository.UserRepository;
import com.example.demo.domain.Transaction;
import com.example.demo.domain.User;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Transactional
    public User createUser(String email, String fullName, BigDecimal initialBalance) {
        if (userRepository.findByEmail(email).isPresent()) {
            throw new IllegalArgumentException("Email is already registered.");
        }
        User user = new User(null, email, fullName, initialBalance == null ? BigDecimal.ZERO : initialBalance);
        return userRepository.save(user);
    }

    public User findUserById(Long id) {
        return userRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("User not found."));
    }
}
=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/java/com/example/demo/usecase/UserService.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/resources/application.properties ===
spring.application.name=FintechTransactionService

spring.datasource.url=jdbc:mysql://localhost:3306/fintech_db?useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=Password

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-13/solution/src/main/resources/application.properties ===
