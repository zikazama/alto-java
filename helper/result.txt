

=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/FinanceApplication.java ===
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching
public class FinanceApplication {

	public static void main(String[] args) {
		SpringApplication.run(FinanceApplication.class, args);
	}

}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/FinanceApplication.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/config/RabbitMQConfig.java ===
package com.example.demo.config;

import org.springframework.amqp.core.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitMQConfig {

    public static final String TRANSACTION_QUEUE = "transactionQueue";
    public static final String EXCHANGE = "transactionExchange";
    public static final String ROUTING_KEY = "transactionRoutingKey";

    @Bean
    public Queue transactionQueue() {
        return new Queue(TRANSACTION_QUEUE, true);
    }

    @Bean
    public TopicExchange transactionExchange() {
        return new TopicExchange(EXCHANGE);
    }

    @Bean
    public Binding binding(Queue transactionQueue, TopicExchange transactionExchange) {
        return BindingBuilder.bind(transactionQueue).to(transactionExchange).with(ROUTING_KEY);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/config/RabbitMQConfig.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/controller/AccountController.java ===
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/account")
public class AccountController {

    @Autowired
    private AccountService accountService;

    @GetMapping("/{accountId}")
    public ResponseEntity<AccountBalance> getAccountBalance(@PathVariable String accountId) {
        return ResponseEntity.ok(accountService.getAccountBalance(accountId));
    }

    @PutMapping("/{accountId}")
    public ResponseEntity<String> updateAccountBalance(@PathVariable String accountId, @RequestBody Double newBalance) {
        accountService.updateAccountBalance(accountId, newBalance);
        return ResponseEntity.ok("Account balance updated successfully");
    }
}
=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/controller/AccountController.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/controller/LoanApplicationController.java ===
package com.example.demo.controller;

import com.example.demo.service.LoanApplicationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/loan")
public class LoanApplicationController {

    @Autowired
    private LoanApplicationService loanApplicationService;

    @PostMapping("/apply")
    public String applyForLoan(@RequestBody String loanApplication) {
        loanApplicationService.submitLoanApplication(loanApplication);
        return "Pengajuan pinjaman berhasil diterima";
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/controller/LoanApplicationController.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/controller/TransactionController.java ===
package com.example.demo.controller;

import com.example.demo.service.TransactionService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/transactions")
public class TransactionController {

    private final TransactionService transactionService;

    public TransactionController(TransactionService transactionService) {
        this.transactionService = transactionService;
    }

    @PostMapping
    public ResponseEntity<String> createTransaction(@RequestBody String transactionData) {
        transactionService.processAndSendTransaction(transactionData);
        return ResponseEntity.ok("Transaction sent successfully");
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/controller/TransactionController.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/LoanApplicationConsumer.java ===
package com.example.demo.kafka;

import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class LoanApplicationConsumer {

    @KafkaListener(topics = "loan-applications", groupId = "loan-application-consumer")
    public void consume(String loanApplication) {
        // Proses pengajuan pinjaman
        System.out.println("Menerima pengajuan pinjaman: " + loanApplication);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/LoanApplicationConsumer.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/LoanApplicationProducer.java ===
package com.example.demo.kafka;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class LoanApplicationProducer {

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    private static final String TOPIC = "loan-applications";

    public void sendLoanApplication(String loanApplication) {
        ProducerRecord<String, String> record = new ProducerRecord<>(TOPIC, loanApplication);
        kafkaTemplate.send(record);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/LoanApplicationProducer.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/TransactionConsumer.java ===
package com.example.demo.kafka;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;

@Service
public class TransactionConsumer {

    @RabbitListener(queues = "transactionQueue")
    public void receiveTransaction(String transactionMessage) {
        System.out.println("Transaction message received: " + transactionMessage);
        processTransaction(transactionMessage);
    }

    private void processTransaction(String transactionMessage) {
        // Logika pemrosesan transaksi
        System.out.println("Processing transaction: " + transactionMessage);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/TransactionConsumer.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/TransactionProducer.java ===
package com.example.demo.kafka;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class TransactionProducer {

    private final RabbitTemplate rabbitTemplate;
    private final String exchange;
    private final String routingKey;

    public TransactionProducer(RabbitTemplate rabbitTemplate, 
                               @Value("${transaction.exchange}") String exchange,
                               @Value("${transaction.routingKey}") String routingKey) {
        this.rabbitTemplate = rabbitTemplate;
        this.exchange = exchange;
        this.routingKey = routingKey;
    }

    public void sendTransaction(String transactionMessage) {
        rabbitTemplate.convertAndSend(exchange, routingKey, transactionMessage);
        System.out.println("Transaction message sent: " + transactionMessage);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/kafka/TransactionProducer.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/model/AccountBalance.java ===
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
public class AccountBalance {
    @Id
    private String accountId;
    private Double balance;

    public String getAccountId() {
        return accountId;
    }
    
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }
    
    public Double getBalance() {
        return balance;
    }
    
    public void setBalance(Double balance) {
        this.balance = balance;
    }
    
}
=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/model/AccountBalance.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/notification/NotificationListener.java ===
package com.example.demo.notification;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;

@Service
public class NotificationListener {

    @RabbitListener(queues = "loan-notifications")
    public void receiveNotification(String notificationMessage) {
        System.out.println("Notifikasi diterima: " + notificationMessage);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/notification/NotificationListener.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/notification/NotificationPublisher.java ===
package com.example.demo.notification;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class NotificationPublisher {

    @Autowired
    private RabbitTemplate rabbitTemplate;

    private static final String QUEUE_NAME = "loan-notifications";

    public void sendNotification(String notificationMessage) {
        rabbitTemplate.convertAndSend(QUEUE_NAME, notificationMessage);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/notification/NotificationPublisher.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/repository/AccountRepository.java ===
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface AccountRepository extends JpaRepository<AccountBalance, String> {
}
=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/repository/AccountRepository.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/service/AccountService.java ===
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

@Service
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    @Cacheable(value = "accountBalance", key = "#accountId")
    public AccountBalance getAccountBalance(String accountId) {
        return accountRepository.findById(accountId)
                .orElseThrow(() -> new RuntimeException("Account not found"));
    }

    @CacheEvict(value = "accountBalance", key = "#accountId")
    public void updateAccountBalance(String accountId, Double newBalance) {
        AccountBalance account = accountRepository.findById(accountId)
                .orElseThrow(() -> new RuntimeException("Account not found"));
        account.setBalance(newBalance);
        accountRepository.save(account);
    }
}
=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/service/AccountService.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/service/LoanApplicationService.java ===
package com.example.demo.service;

import com.example.demo.kafka.LoanApplicationProducer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class LoanApplicationService {

    @Autowired
    private LoanApplicationProducer loanApplicationProducer;

    public void submitLoanApplication(String loanApplication) {
        // Simpan pengajuan pinjaman ke Redis cache
        loanApplicationProducer.sendLoanApplication(loanApplication);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/service/LoanApplicationService.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/service/TransactionService.java ===
package com.example.demo.service;

import com.example.demo.kafka.TransactionProducer;
import org.springframework.stereotype.Service;

@Service
public class TransactionService {

    private final TransactionProducer transactionProducer;

    public TransactionService(TransactionProducer transactionProducer) {
        this.transactionProducer = transactionProducer;
    }

    public void processAndSendTransaction(String transactionData) {
        // Logika tambahan sebelum pengiriman (misalnya validasi)
        transactionProducer.sendTransaction(transactionData);
    }
}

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/java/com/example/demo/service/TransactionService.java ===


=== Start of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/resources/application.properties ===
spring.application.name=finance
spring.redis.host=localhost
spring.redis.port=6379

spring.datasource.url=jdbc:mysql://localhost:3306/financial_db
spring.datasource.username=root
spring.datasource.password=Password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

transaction.exchange=transactionExchange
transaction.routingKey=transactionRoutingKey

logging.level.org.springframework.amqp=INFO
logging.level.com.example.demo=DEBUG

=== End of /Users/memberid/Documents/Alto/alto-java/sesi-8/case/src/main/resources/application.properties ===
