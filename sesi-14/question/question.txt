Perusahaan FinTech yang bergerak di bidang layanan transaksi keuangan memerlukan aplikasi untuk mengelola akun pelanggan, memproses transaksi keuangan secara real-time, serta menghasilkan laporan transaksi. Aplikasi harus dibangun dengan menggunakan Spring Boot (Maven) versi Java 21 dan mendukung pola komunikasi berbasis REST API untuk integrasi sistem antar layanan.

Aplikasi ini harus dapat menangani beberapa transaksi keuangan, seperti deposito, penarikan, dan transfer antar akun. Aplikasi juga harus mencatat seluruh transaksi, mengupdate saldo pelanggan secara otomatis, dan menghasilkan laporan berbasis periode tertentu.

Pengelolaan Data Pelanggan:
Buat API untuk melakukan operasi CRUD pada data pelanggan, seperti:
CREATE pelanggan baru (menambahkan akun baru).
READ data pelanggan.
UPDATE data pelanggan (misalnya mengganti alamat email).
DELETE data pelanggan.

Proses Transaksi Keuangan:
Implementasikan dua jenis transaksi: Deposit (menambah saldo) dan Penarikan (mengurangi saldo).
Pastikan ada validasi saldo untuk transaksi penarikan agar saldo tidak negatif.
Setiap transaksi harus disimpan dengan atribut idTransaksi, idPelanggan, jenisTransaksi (Deposit/Penarikan), nominal, dan tanggal.

Laporan Transaksi:
Buat API untuk menghasilkan laporan transaksi berdasarkan periode waktu tertentu (misalnya, transaksi dalam satu bulan).
Laporan harus menyertakan informasi total transaksi dan saldo akhir per pelanggan.

Penggunaan Design Patterns:
Gunakan Singleton Pattern untuk pengelolaan konfigurasi aplikasi yang bersifat global.
Terapkan Factory Pattern untuk pembuatan objek transaksi yang berbeda (deposito vs penarikan).

Implementasi Clean Code:
Buat kode yang terstruktur dengan baik dan mudah dipahami, dengan penamaan variabel dan metode yang jelas.
Gunakan prinsip-prinsip Clean Code seperti menghindari duplikasi kode dan menulis kode yang mudah untuk diuji.

Database:
Gunakan PostgreSQL untuk menyimpan data pelanggan dan transaksi.
Gunakan Spring Data JPA untuk menghubungkan Spring Boot dengan database PostgreSQL.
Pastikan query dapat dioptimalkan, dengan memperhatikan normalisasi database untuk mengurangi redundansi data.

Testing API dengan Postman:
Sediakan contoh data untuk pelanggan dan transaksi.
Gunakan Postman untuk menguji API yang telah Anda buat, termasuk pengujian untuk validasi transaksi (misalnya saldo yang tidak cukup untuk penarikan).

Pengelolaan Akun Pelanggan (CRUD):
Endpoint:
POST /api/pelanggan: Menambahkan pelanggan baru.
GET /api/pelanggan/{id}: Mengambil data pelanggan berdasarkan id.
PUT /api/pelanggan/{id}: Memperbarui data pelanggan berdasarkan id.
DELETE /api/pelanggan/{id}: Menghapus pelanggan berdasarkan id.

Proses Transaksi:
Endpoint:
POST /api/transaksi/deposito: Memproses transaksi deposito (menambah saldo).
POST /api/transaksi/penarikan: Memproses transaksi penarikan (mengurangi saldo, dengan validasi saldo).

Laporan Transaksi:
Endpoint:
GET /api/laporan/transaksi: Mengambil laporan transaksi berdasarkan periode waktu.

Sertakan file README dengan instruksi cara menjalankan aplikasi.
Diagram Arsitektur Aplikasi (misalnya menggunakan UML).
Instruksi Penggunaan API (termasuk contoh request dan response JSON).
Kode Sumber (termasuk file pom.xml, file konfigurasi database, dan implementasi Java).

