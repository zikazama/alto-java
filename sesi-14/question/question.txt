Sebuah perusahaan FinTech yang bergerak di bidang layanan transaksi keuangan membutuhkan aplikasi untuk:
Mengelola akun pelanggan.
Memproses transaksi keuangan secara real-time.
Menghasilkan laporan transaksi secara terjadwal atau berdasarkan permintaan.

Aplikasi harus dibangun dengan Spring Boot (Maven) menggunakan Java 21 dan mendukung pola komunikasi berbasis REST API untuk integrasi antar layanan. Sistem harus mendukung beberapa jenis transaksi keuangan seperti deposito, penarikan, dan transfer antar akun. Aplikasi ini juga harus mencatat seluruh transaksi, mengupdate saldo pelanggan secara otomatis, serta menghasilkan laporan transaksi yang dapat difilter berdasarkan periode tertentu.

Pengelolaan Data Pelanggan (User Service)
Buat API untuk operasi CRUD pada data pelanggan dengan fitur berikut:
CREATE pelanggan baru, dengan validasi email unik dan format yang benar.
READ data pelanggan berdasarkan ID.
UPDATE data pelanggan seperti mengganti alamat email.
DELETE pelanggan berdasarkan ID.

Proses Transaksi Keuangan (Transaction Service)
Buat API untuk transaksi keuangan berikut:
Deposit: Menambah saldo.
Penarikan: Mengurangi saldo dengan validasi agar saldo tidak negatif.
Setiap transaksi harus memiliki atribut berikut:
idTransaksi, idPelanggan, jenisTransaksi (Deposit/Penarikan/Transfer), nominal, tanggal.

Laporan Transaksi (Report Service)
Buat API untuk menghasilkan laporan transaksi berdasarkan periode waktu tertentu, yang mencakup:
Total transaksi pada periode tersebut.
Saldo akhir per pelanggan pada periode yang ditentukan.
Struktur dan Prinsip Clean Architecture

Bagi kode ke dalam beberapa layer utama berikut:
Presentation Layer: Mengelola REST API.
Application Layer: Menyediakan service untuk logika bisnis.
Domain Layer: Mendefinisikan model dan entitas utama aplikasi.
Infrastructure Layer: Berisi kode untuk mengelola database, pengelolaan konfigurasi global, dan implementasi koneksi antar layanan.

Validasi Input
Tetapkan validasi berikut:
Email harus unik dan formatnya valid. Gunakan anotasi @Email dan @UniqueConstraint.
Nominal transaksi harus angka positif. Gunakan anotasi @Min(1).
Saldo pelanggan harus cukup untuk transaksi withdraw atau transfer. Implementasikan validasi ini di Service Layer.

Unit Testing (Minimal 3 Skenario)
Buat pengujian unit dengan minimal 3 skenario:
Berhasil menambahkan pelanggan baru.
Gagal withdraw karena saldo tidak cukup.
Gagal registrasi jika email sudah digunakan.

Konsep Microservices
Pisahkan sistem ke dalam tiga service:
User Service: Mengelola data pelanggan (CRUD).
Transaction Service: Memproses transaksi.
Report Service: Mengelola laporan transaksi.
Gunakan REST API atau gRPC untuk komunikasi antar layanan.

Penggunaan Design Patterns
Gunakan Singleton Pattern untuk pengelolaan konfigurasi aplikasi global.
Gunakan Factory Pattern untuk pembuatan objek transaksi yang berbeda (deposito, penarikan, transfer).

Database
Gunakan PostgreSQL untuk menyimpan data pelanggan dan transaksi.
Gunakan Spring Data JPA untuk menghubungkan Spring Boot dengan database PostgreSQL.
Pastikan desain database telah dinormalisasi untuk mengurangi redundansi data dan mendukung kinerja optimal.

Testing API dengan Postman
Berikan contoh data pelanggan dan transaksi.
Uji API untuk CRUD pelanggan, validasi saldo, dan laporan transaksi.


